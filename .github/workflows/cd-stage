name: CD — Staging (ACI create → test → delete)

on:
  workflow_run:
    workflows: [
      "Backend CI — Build & Push (SHA tags)",
      "Frontend CI — Build & Push (SHA tags)"
    ]
    types: ["completed"]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  LOCATION: australiaeast
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}

jobs:
  staging:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}

      - name: Names
        id: n
        run: |
          echo "RG=rg-stg-${GITHUB_SHA::6}" >> $GITHUB_OUTPUT
          echo "TAG=${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Create staging RG
        run: az group create -n ${{ steps.n.outputs.RG }} -l ${{ env.LOCATION }}

      - name: ACI product
        run: |
          az container create -g ${{ steps.n.outputs.RG }} -n product-stg \
            --image ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ steps.n.outputs.TAG }} \
            --dns-name-label product-${{ github.run_id }} \
            --ports 8000 --cpu 1 --memory 1.5 --restart-policy Never \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username ${{ env.ACR_USERNAME }} \
            --registry-password ${{ env.ACR_PASSWORD }}

      - name: ACI order
        run: |
          az container create -g ${{ steps.n.outputs.RG }} -n order-stg \
            --image ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ steps.n.outputs.TAG }} \
            --dns-name-label order-${{ github.run_id }} \
            --ports 8000 --cpu 1 --memory 1.5 --restart-policy Never \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username ${{ env.ACR_USERNAME }} \
            --registry-password ${{ env.ACR_PASSWORD }}

      - name: ACI frontend
        run: |
          az container create -g ${{ steps.n.outputs.RG }} -n frontend-stg \
            --image ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ steps.n.outputs.TAG }} \
            --dns-name-label fe-${{ github.run_id }} \
            --ports 80 --cpu 1 --memory 1 --restart-policy Never \
            --registry-login-server ${{ env.ACR_LOGIN_SERVER }} \
            --registry-username ${{ env.ACR_USERNAME }} \
            --registry-password ${{ env.ACR_PASSWORD }}

      - name: Show containers
        run: az container list -g ${{ steps.n.outputs.RG }} -o table

      - name: Quick test (curl frontend)
        run: |
          FE=$(az container show -g ${{ steps.n.outputs.RG }} -n frontend-stg --query ipAddress.fqdn -o tsv)
          echo "http://$FE"
          curl -I --max-time 15 "http://$FE" || true

      - name: Delete staging RG
        if: always()
        run: az group delete -n ${{ steps.n.outputs.RG }} --yes --no-wait || true
